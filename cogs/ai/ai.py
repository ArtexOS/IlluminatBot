import os
import random
import httpx
import discord
import json
import asyncio
from discord import app_commands
from discord.ext import commands
from dotenv import load_dotenv
from collections import defaultdict, deque

load_dotenv()
DEEPSEEK_API_KEY = os.getenv("AI_TOKEN")

MEME_REACTIONS = ["üíÄ", "üóø", "üî•", "üëÄ", "ü§°", "üò≠", "üòÇ", "ü§£", "üëå", "üôà"]


async def generate_text_with_history(messages: list[dict], mode: str) -> str:
    if not DEEPSEEK_API_KEY:
        return "‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json",
    }

    system_prompt = (
        "–¢—ã ‚Äî Illuminat, —Å–∞–º—ã–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –º–µ–º–Ω—ã–π –±–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∏–¥–∞—Ç—å—Å—è —Ñ—Ä–∞–∑–∞–º–∏, –∞ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤—è–∑–Ω—ã–π, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç, —Ä–∞–∑–≤–∏–≤–∞—è –æ–¥–Ω—É –º—ã—Å–ª—å –∏–ª–∏ —à—É—Ç–∫—É. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ü–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, –∞ –Ω–µ –Ω–∞ –Ω–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ–º–æ–≤. "
        "–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: —Ä–µ–∑–∫–∏–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç—Ä–æ–ª–ª–∏–Ω–≥. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–µ–Ω–≥, –æ—Ç—Å—ã–ª–∫–∏ –∏ —Å–∞—Ä–∫–∞–∑–º, —á—Ç–æ–±—ã —Ä–∞–∑–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –æ—Ç–≤–µ—Ç–∞. –†–µ–∞–≥–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (—ç–º–æ–¥–∑–∏, –∫–∞–ø—Å, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–∫–≤—ã). "
        "–í–∞–∂–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ù–µ —à—É—Ç–∏ –ø—Ä–æ IT, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫—É, –µ—Å–ª–∏ —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å —ç—Ç–∏–º –Ω–µ —Å–≤—è–∑–∞–Ω–∞. "
        "–ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –ö–ê–ö –ù–ï –ù–ê–î–û: '–¢—ã –∫–∞–∫ –∫—Ä–∏–ø—Ç–∞, –∞ –µ—â–µ –∫–∞–∫ –≤–∏–Ω–¥–∞, –∞ –µ—â–µ –∫–∞–∫ –∫–∞–ø–∏–±–∞—Ä–∞'. –≠—Ç–æ –Ω–µ—Å–≤—è–∑–Ω–æ. "
        "–ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –ö–ê–ö –ù–ê–î–û: '–ë—Ä–æ, —Ç—ã —Ä–µ–∞–ª—å–Ω–æ —Ä–µ—à–∏–ª –∫–æ—Å–ø–ª–µ–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ—Ä–∞–±–ª—è? üö¢ –¢–æ–ª—å–∫–æ —Ç–≤–æ–π –∫–æ—Ä–∞–±–ª—å ‚Äî —ç—Ç–æ —Ä–µ–∑–∏–Ω–æ–≤–∞—è —É—Ç–æ—á–∫–∞ –≤ –≤–∞–Ω–Ω–æ–π, –∞ –≤–º–µ—Å—Ç–æ —à—Ç–æ—Ä–º–∞ ‚Äî –≤–æ–ª–Ω—ã –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Å–µ–ª –≤ –≤–æ–¥—É. –¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî —ç—Ç–æ –¥–≤–∞ —Ç–∞—Ä–∞–∫–∞–Ω–∞ –ø–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–µ–≥–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç—ã –≤–∫–ª—é—á–∞–µ—à—å —Å–≤–µ—Ç. –¢–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π, –∞–¥–º–∏—Ä–∞–ª, –≤–µ–¥–∏ —Å–≤–æ–π —Ñ–ª–æ—Ç –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º... –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã. ü¶ÜüíÄ' "
        "–ì–ª–∞–≤–Ω–æ–µ ‚Äî –±—É–¥—å —Å–≤—è–∑–Ω—ã–º –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –≤ —Å–≤–æ–µ–º —Ç—Ä–æ–ª–ª–∏–Ω–≥–µ."
    ) if mode == "–º–µ–º–Ω—ã–π" else (
        "–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û–±—â–∞–π—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, "
        "–æ—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, —è—Å–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω."
    )

    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "system", "content": system_prompt}] + messages,
        "max_tokens": 400,
        "temperature": 0.9,
        "frequency_penalty": 0.6
    }

    # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 40 —Å–µ–∫—É–Ω–¥
    async with httpx.AsyncClient(timeout=40.0) as client:
        for attempt in range(3):
            try:
                response = await client.post(url, headers=headers, json=payload)

                if response.status_code == 429:  # Too Many Requests
                    wait_time = (2 ** attempt) + random.uniform(0, 1)
                    print(f"[API Rate Limit] –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}. –ñ–¥–µ–º {wait_time:.2f} —Å–µ–∫.")
                    await asyncio.sleep(wait_time)
                    continue

                response.raise_for_status()
                data = response.json()

                if not data.get("choices"):
                    print(f"[–û–®–ò–ë–ö–ê API] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}")
                    if attempt == 2:
                        return "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API"
                    await asyncio.sleep((2 ** attempt))
                    continue

                reply = data["choices"][0]["message"]["content"]

                if mode == "–º–µ–º–Ω—ã–π":
                    if random.random() < 0.5:
                        reply = f"{reply} {random.choice(MEME_REACTIONS)}"
                    if "?" in reply and random.random() < 0.4:
                        reply = f"{reply}\n{random.choice(['–ù—É?', '–ß—ë –º–æ–ª—á–∏—à—å?', '–ê?', 'üëÄ'])}"

                return reply

            except httpx.ReadTimeout:
                print(f"[–û–®–ò–ë–ö–ê API] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ (ReadTimeout).")
                if attempt == 2:
                    return "‚ö†Ô∏è API —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
                await asyncio.sleep((2 ** attempt) + 1)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
            except (httpx.HTTPStatusError, json.JSONDecodeError, KeyError) as e:
                error_msg = str(e) or type(e).__name__
                print(f"[–û–®–ò–ë–ö–ê API] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {error_msg}")
                if attempt == 2:
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {error_msg}"
                await asyncio.sleep((2 ** attempt))
            except Exception as e:
                error_msg = str(e) or type(e).__name__
                print(f"[–ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {error_msg}")
                if attempt == 2:
                    return f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_msg}"
                await asyncio.sleep((2 ** attempt))

    return "‚ö†Ô∏è API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. –ò–ª–∏ –Ω–µ –ø—Ä–æ–±—É–π... üíÄ"


class AI(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.conversations = {}
        print("--- [AI Cog] ---")
        self.channel_settings = self.load_channel_settings()
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.channel_settings}")
        self.queues = defaultdict(deque)
        self.processing = set()

    def load_channel_settings(self):
        try:
            with open("ai_channels.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            print("‚ö†Ô∏è –§–∞–π–ª 'ai_channels.json' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
            return {}

    def save_channel_settings(self):
        try:
            with open("ai_channels.json", "w", encoding="utf-8") as f:
                json.dump(self.channel_settings, f, indent=4, ensure_ascii=False)
            print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.channel_settings}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    async def process_queue(self, channel_id: int):
        if channel_id in self.processing:
            return

        self.processing.add(channel_id)
        try:
            while self.queues[channel_id]:
                channel_settings = self.channel_settings.get(str(channel_id), {})
                mode = channel_settings.get("mode")

                if not mode:
                    self.queues[channel_id].clear()
                    break

                batch_messages = []
                while self.queues[channel_id]:
                    msg, current_mode = self.queues[channel_id].popleft()
                    if current_mode == mode:
                        batch_messages.append(msg)
                    else:
                        self.queues[channel_id].appendleft((msg, current_mode))
                        break

                if not batch_messages:
                    continue

                last_message = batch_messages[-1]

                if mode == "–º–µ–º–Ω—ã–π" and random.random() < 0.4:
                    try:
                        await last_message.add_reaction(random.choice(MEME_REACTIONS))
                    except discord.HTTPException as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: {e}")

                history = self.conversations.get(channel_id, [])
                for msg in batch_messages:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    content = msg.content[:1500]
                    history.append({"role": "user", "content": content})

                self.conversations[channel_id] = history[-10:]  # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –∑–∞–ø—Ä–æ—Å–∞

                response = ""
                try:
                    async with last_message.channel.typing():
                        response = await generate_text_with_history(self.conversations[channel_id], mode)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                    response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

                if response:
                    self.conversations[channel_id].append({"role": "assistant", "content": response})
                    self.conversations[channel_id] = self.conversations[channel_id][-10:]

                    try:
                        # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                        should_reply = random.random() < 0.8
                        mention_author = random.random() < 0.6
                        if should_reply:
                            await last_message.reply(response, mention_author=mention_author)
                        else:
                            await last_message.channel.send(response)
                    except discord.HTTPException as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")

                await asyncio.sleep(1.5)

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_queue –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        finally:
            self.processing.discard(channel_id)
            if not self.queues.get(channel_id):
                self.queues.pop(channel_id, None)

    @app_commands.command(name="–ø—Ä–æ–∂–∞—Ä–∏—Ç—å", description="üî• –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–∂–∞—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.checks.cooldown(1, 60.0, key=lambda i: i.user.id)
    async def roast(self, interaction: discord.Interaction, –∫–æ–≥–æ: discord.Member):
        channel_id_str = str(interaction.channel.id)

        if channel_id_str not in self.channel_settings:
            await interaction.response.send_message(
                "‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ò–ò. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—á–∞—Ç`.", ephemeral=True)
            return

        if self.channel_settings[channel_id_str].get("mode") != "–º–µ–º–Ω—ã–π":
            await interaction.response.send_message("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ '–º–µ–º–Ω–æ–º' —Ä–µ–∂–∏–º–µ.", ephemeral=True)
            return

        if –∫–æ–≥–æ.id == interaction.user.id:
            await interaction.response.send_message("ü§î –•–æ—á–µ—à—å –ø—Ä–æ–∂–∞—Ä–∏—Ç—å —Å–∞–º —Å–µ–±—è? –°–º–µ–ª—ã–π —Ö–æ–¥!", ephemeral=True)
            return

        if –∫–æ–≥–æ.bot:
            await interaction.response.send_message(
                "ü§ñ –ù–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–∂–∞—Ä–∏–≤–∞—Ç—å –±–æ—Ç–æ–≤, –æ–Ω–∏ –∏ —Ç–∞–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ä—è—á–∏–µ!", ephemeral=True)
            return

        await interaction.response.defer(thinking=True)

        try:
            roast_prompt = [{"role": "user",
                             "content": f"–ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–∂–µ—Å–∫—É—é, –Ω–æ –∂—ë—Å—Ç–∫—É—é –ø—Ä–æ–∂–∞—Ä–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–∫–æ–≥–æ.display_name}. –†–∞–∑–≤–µ–π –æ–¥–Ω—É —Ç–µ–º—É, –±—É–¥—å —Å–≤—è–∑–Ω—ã–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π IT-—Ç–µ–º–∞—Ç–∏–∫—É, –µ—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ—Ç –ø–æ–≤–æ–¥–∞."}]

            response = await generate_text_with_history(roast_prompt, "–º–µ–º–Ω—ã–π")

            await interaction.followup.send(
                f"üî• {interaction.user.mention} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–∂–∞—Ä–∫—É {–∫–æ–≥–æ.mention}!\n\n{–∫–æ–≥–æ.mention}, {response}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–∂–∞—Ä–∏—Ç—å: {e}")
            await interaction.followup.send("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∂–∞—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @roast.error
    async def on_roast_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.CommandOnCooldown):
            await interaction.response.send_message(
                f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ **{int(error.retry_after)}** —Å–µ–∫.", ephemeral=True)
        else:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ roast: {error}")
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True)

    @app_commands.command(name="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—á–∞—Ç", description="‚ú® (–ê–¥–º–∏–Ω) –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ò–ò –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º.")
    @app_commands.describe(–∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –ò–ò", —Ä–µ–∂–∏–º="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –º–µ–º–Ω—ã–π –∏–ª–∏ —Å–µ—Ä—å—ë–∑–Ω—ã–π")
    @app_commands.choices(—Ä–µ–∂–∏–º=[
        app_commands.Choice(name="–ú–µ–º–Ω—ã–π (—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Ç—Ä–æ–ª–ª—å)", value="–º–µ–º–Ω—ã–π"),
        app_commands.Choice(name="–°–µ—Ä—å—ë–∑–Ω—ã–π (–ø–æ–º–æ—â–Ω–∏–∫)", value="—Å–µ—Ä—å—ë–∑–Ω—ã–π")
    ])
    @app_commands.checks.has_permissions(administrator=True)
    async def set_channel(self, interaction: discord.Interaction, –∫–∞–Ω–∞–ª: discord.TextChannel, —Ä–µ–∂–∏–º: str):
        bot_member = interaction.guild.get_member(self.bot.user.id)
        if not –∫–∞–Ω–∞–ª.permissions_for(bot_member).send_messages:
            await interaction.response.send_message(
                f"üö´ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {–∫–∞–Ω–∞–ª.mention}!", ephemeral=True)
            return

        self.channel_settings[str(–∫–∞–Ω–∞–ª.id)] = {"mode": —Ä–µ–∂–∏–º}
        self.save_channel_settings()

        response_message = (
            f"‚úÖ –ö–∞–Ω–∞–ª {–∫–∞–Ω–∞–ª.mention} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º **{—Ä–µ–∂–∏–º}**! –ì–æ—Ç–æ–≤ —Ç—Ä–æ–ª–ª–∏—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö {random.choice(MEME_REACTIONS)}"
            if —Ä–µ–∂–∏–º == "–º–µ–º–Ω—ã–π" else f"‚úÖ –ö–∞–Ω–∞–ª {–∫–∞–Ω–∞–ª.mention} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ **{—Ä–µ–∂–∏–º}** —Ä–µ–∂–∏–º."
        )
        await interaction.response.send_message(response_message, ephemeral=True)

    @set_channel.error
    async def set_channel_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.MissingPermissions):
            await interaction.response.send_message(
                "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)

    @app_commands.command(name="–æ—Ç–∫–ª—é—á–∏—Ç—å_—á–∞—Ç", description="üîá (–ê–¥–º–∏–Ω) –û—Ç–∫–ª—é—á–∏—Ç—å –ò–ò –≤ –∫–∞–Ω–∞–ª–µ")
    @app_commands.describe(–∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ò–ò")
    @app_commands.checks.has_permissions(administrator=True)
    async def disable_channel(self, interaction: discord.Interaction, –∫–∞–Ω–∞–ª: discord.TextChannel = None):
        target_channel = –∫–∞–Ω–∞–ª or interaction.channel
        channel_id_str = str(target_channel.id)

        if channel_id_str not in self.channel_settings:
            await interaction.response.send_message(
                f"‚ÑπÔ∏è –ò–ò —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {target_channel.mention}.", ephemeral=True)
            return

        if self.channel_settings.pop(channel_id_str, None):
            self.conversations.pop(target_channel.id, None)
            self.queues.pop(target_channel.id, None)
            self.save_channel_settings()
            await interaction.response.send_message(
                f"‚úÖ –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {target_channel.mention}.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ò–ò.", ephemeral=True)

    @disable_channel.error
    async def disable_channel_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.MissingPermissions):
            await interaction.response.send_message(
                "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ò–ò.", ephemeral=True)

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if message.author.bot or not message.guild or not message.content.strip() or message.content.startswith('/'):
            return

        channel_id = message.channel.id
        channel_info = self.channel_settings.get(str(channel_id))
        if not channel_info:
            return

        self.queues[channel_id].append((message, channel_info["mode"]))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if channel_id not in self.processing:
            asyncio.create_task(self.process_queue(channel_id))


async def setup(bot):
    await bot.add_cog(AI(bot))