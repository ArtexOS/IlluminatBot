import discord
import json
import os
from discord import app_commands
from discord.ext import commands

CONFIG_FILE = "staff_config.json"


def load_config():
    if not os.path.exists(CONFIG_FILE):
        default_config = {
            "application_channel_id": None,
            "roles": []
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
        return default_config

    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {"application_channel_id": None, "roles": []}


def save_config(config):
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {CONFIG_FILE}: {e}")


class StaffApplicationModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å"):
    def __init__(self, selected_role: dict):
        super().__init__()
        self.selected_role = selected_role

        self.name_input = discord.ui.TextInput(label="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω", required=True)
        self.age_input = discord.ui.TextInput(label="–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 18", required=True,
                                              max_length=3)
        self.timezone_input = discord.ui.TextInput(label="–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–°–ö (UTC+3)",
                                                   required=True)
        self.availability_input = discord.ui.TextInput(label="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä—É?",
                                                       style=discord.TextStyle.long,
                                                       placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2-3 —á–∞—Å–∞ –≤ –±—É–¥–Ω–∏, 4-5 —á–∞—Å–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ.",
                                                       required=True)
        self.trust_input = discord.ui.TextInput(label="–ü–æ—á–µ–º—É –º—ã –º–æ–∂–µ–º –≤–∞–º –¥–æ–≤–µ—Ä—è—Ç—å?", style=discord.TextStyle.long,
                                                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ, —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.",
                                                required=True)

        self.add_item(self.name_input)
        self.add_item(self.age_input)
        self.add_item(self.timezone_input)
        self.add_item(self.availability_input)
        self.add_item(self.trust_input)

    async def on_submit(self, interaction: discord.Interaction):
        config = load_config()
        channel_id = config.get("application_channel_id")
        if not channel_id:
            return await interaction.response.send_message(
                "‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", ephemeral=True)

        channel = interaction.guild.get_channel(channel_id)
        if not channel:
            return await interaction.response.send_message("‚ö†Ô∏è –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                                                           ephemeral=True)

        embed = discord.Embed(
            title=f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            description=f"**–ö–∞–Ω–¥–∏–¥–∞—Ç:** {interaction.user.mention}\n**–ü—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞:** {self.selected_role['label']}",
            color=discord.Color.blue()
        )
        embed.set_author(name=interaction.user, icon_url=interaction.user.avatar)
        embed.add_field(name="üìù –ò–º—è", value=self.name_input.value, inline=False)
        embed.add_field(name="‚è≥ –í–æ–∑—Ä–∞—Å—Ç", value=self.age_input.value, inline=False)
        embed.add_field(name="‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", value=self.timezone_input.value, inline=False)
        embed.add_field(name="üïí –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", value=self.availability_input.value, inline=False)
        embed.add_field(name="ü§ù –î–æ–≤–µ—Ä–∏–µ", value=self.trust_input.value, inline=False)
        embed.set_footer(text=f"UserID:{interaction.user.id}|RoleValue:{self.selected_role['value']}")

        try:
            await channel.send(embed=embed, view=ApplicationActionsView())
            await interaction.response.send_message("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                                                    ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", ephemeral=True)


class StaffSelectView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.select(
        custom_id="staff_persistent_select",
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å...",
        min_values=1, max_values=1
    )
    async def select_callback(self, interaction: discord.Interaction, select: discord.ui.Select):
        config = load_config()
        selected_value = select.values[0]

        selected_role_data = next((role for role in config['roles'] if role['value'] == selected_value), None)

        if not selected_role_data:
            return await interaction.response.send_message("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.", ephemeral=True)

        modal = StaffApplicationModal(selected_role=selected_role_data)
        await interaction.response.send_modal(modal)


class ApplicationActionsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if not interaction.user.guild_permissions.manage_roles:
            await interaction.response.send_message("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, custom_id="staff_accept_button")
    async def accept_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        original_embed = interaction.message.embeds[0]
        footer_text = original_embed.footer.text

        try:
            user_id = int(footer_text.split('|')[0].replace('UserID:', ''))
            role_value = footer_text.split('|')[1].replace('RoleValue:', '')
        except (IndexError, ValueError):
            return await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏.", ephemeral=True)

        member = interaction.guild.get_member(user_id)
        if not member:
            return await interaction.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True,
                                                           delete_after=10)

        config = load_config()
        role_data = next((r for r in config['roles'] if r['value'] == role_value), None)

        role_to_give = None
        if role_data and role_data.get('role_id'):
            role_to_give = interaction.guild.get_role(role_data['role_id'])

        new_embed = original_embed.copy()
        new_embed.color = discord.Color.green()
        new_embed.title = "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"
        new_embed.add_field(name="–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª", value=interaction.user.mention, inline=False)

        for item in self.children:
            item.disabled = True

        await interaction.response.edit_message(embed=new_embed, view=self)

        dm_message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, **{member.display_name}**! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **{interaction.guild.name}** –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞."
        if role_to_give:
            try:
                await member.add_roles(role_to_give,
                                       reason=f"–ü—Ä–∏–Ω—è—Ç –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ –∑–∞—è–≤–∫–µ. –†–µ—à–µ–Ω–∏–µ: {interaction.user}")
                dm_message += f"\n–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å: **{role_to_give.name}**."
            except discord.Forbidden:
                await interaction.followup.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∏ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–ª–µ–π –±–æ—Ç–∞.",
                                                ephemeral=True)
            except Exception as e:
                await interaction.followup.send(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏: {e}", ephemeral=True)

        try:
            await member.send(dm_message)
        except discord.Forbidden:
            pass

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, custom_id="staff_reject_button")
    async def reject_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        original_embed = interaction.message.embeds[0]
        footer_text = original_embed.footer.text

        try:
            user_id = int(footer_text.split('|')[0].replace('UserID:', ''))
        except (IndexError, ValueError):
            return await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏.", ephemeral=True)

        member = interaction.guild.get_member(user_id)

        new_embed = original_embed.copy()
        new_embed.color = discord.Color.red()
        new_embed.title = "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        new_embed.add_field(name="–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª", value=interaction.user.mention, inline=False)

        for item in self.children:
            item.disabled = True

        await interaction.response.edit_message(embed=new_embed, view=self)

        if member:
            try:
                await member.send(
                    f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, **{member.display_name}**, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **{interaction.guild.name}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            except discord.Forbidden:
                pass


class Staff(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.bot.add_view(StaffSelectView())
        self.bot.add_view(ApplicationActionsView())

    @app_commands.command(name="staff_send_message",
                          description="üëë –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤ —Å—Ç–∞—Ñ—Ñ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.")
    @app_commands.describe(–∫–∞–Ω–∞–ª="–ö–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.")
    @app_commands.checks.has_permissions(administrator=True)
    async def staff_send_message(self, interaction: discord.Interaction, –∫–∞–Ω–∞–ª: discord.TextChannel):
        config = load_config()
        roles = config.get('roles', [])

        if not roles:
            return await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π `/add_staff_role`.", ephemeral=True)

        embed = discord.Embed(
            title="–ù–∞–±–æ—Ä –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª —Å–µ—Ä–≤–µ—Ä–∞",
            description="–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞? –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.",
            color=discord.Color.gold()
        )
        embed.set_footer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Å—Ç–Ω–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.")

        view = StaffSelectView()
        select_menu = view.children[0]
        select_menu.options = [discord.SelectOption(label=r['label'], value=r['value']) for r in roles]

        try:
            await –∫–∞–Ω–∞–ª.send(embed=embed, view=view)
            await interaction.response.send_message(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {–∫–∞–Ω–∞–ª.mention}.",
                                                    ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message(f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {–∫–∞–Ω–∞–ª.mention}.",
                                                    ephemeral=True)

    @app_commands.command(name="set_applications_channel",
                          description="‚≠ê (–ê–¥–º–∏–Ω) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ü–†–û–í–ï–†–ö–ò –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ñ—Ñ.")
    @app_commands.describe(–∫–∞–Ω–∞–ª="–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏.")
    @app_commands.checks.has_permissions(administrator=True)
    async def set_applications_channel(self, interaction: discord.Interaction, –∫–∞–Ω–∞–ª: discord.TextChannel):
        config = load_config()
        config['application_channel_id'] = –∫–∞–Ω–∞–ª.id
        save_config(config)
        await interaction.response.send_message(
            f"‚úÖ –ö–∞–Ω–∞–ª {–∫–∞–Ω–∞–ª.mention} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫.",
            ephemeral=True
        )

    @app_commands.command(name="add_staff_role", description="‚≠ê (–ê–¥–º–∏–Ω) –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞–±–æ—Ä–∞.")
    @app_commands.describe(
        –Ω–∞–∑–≤–∞–Ω–∏–µ="–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä').",
        –∑–Ω–∞—á–µ–Ω–∏–µ="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä 'moderator').",
        —Ä–æ–ª—å="–†–æ–ª—å Discord, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."
    )
    @app_commands.checks.has_permissions(administrator=True)
    async def add_staff_role(self, interaction: discord.Interaction, –Ω–∞–∑–≤–∞–Ω–∏–µ: str, –∑–Ω–∞—á–µ–Ω–∏–µ: str,
                             —Ä–æ–ª—å: discord.Role = None):
        config = load_config()
        if any(r['value'] == –∑–Ω–∞—á–µ–Ω–∏–µ for r in config['roles']):
            return await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ '{–∑–Ω–∞—á–µ–Ω–∏–µ}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.",
                                                           ephemeral=True)

        new_role = {"label": –Ω–∞–∑–≤–∞–Ω–∏–µ, "value": –∑–Ω–∞—á–µ–Ω–∏–µ, "role_id": —Ä–æ–ª—å.id if —Ä–æ–ª—å else None}
        config['roles'].append(new_role)
        save_config(config)
        await interaction.response.send_message(f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å '{–Ω–∞–∑–≤–∞–Ω–∏–µ}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.", ephemeral=True)

    @app_commands.command(name="remove_staff_role", description="‚≠ê (–ê–¥–º–∏–Ω) –£–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–æ—Ä–∞.")
    @app_commands.describe(–∑–Ω–∞—á–µ–Ω–∏–µ="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    @app_commands.checks.has_permissions(administrator=True)
    async def remove_staff_role(self, interaction: discord.Interaction, –∑–Ω–∞—á–µ–Ω–∏–µ: str):
        config = load_config()
        initial_len = len(config['roles'])
        config['roles'] = [r for r in config['roles'] if r['value'] != –∑–Ω–∞—á–µ–Ω–∏–µ]

        if len(config['roles']) < initial_len:
            save_config(config)
            await interaction.response.send_message(f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å '{–∑–Ω–∞—á–µ–Ω–∏–µ}' —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å '{–∑–Ω–∞—á–µ–Ω–∏–µ}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

    @remove_staff_role.autocomplete('–∑–Ω–∞—á–µ–Ω–∏–µ')
    async def remove_staff_role_autocomplete(self, _: discord.Interaction, current: str) -> list[
        app_commands.Choice[str]]:
        config = load_config()
        choices = [
            app_commands.Choice(name=role['label'], value=role['value'])
            for role in config.get('roles', [])
            if current.lower() in role['label'].lower() or current.lower() in role['value'].lower()
        ]
        return choices[:25]


async def setup(bot: commands.Bot):
    await bot.add_cog(Staff(bot))
